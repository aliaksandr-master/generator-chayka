'use strict';
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
var utils = require('../utils'), util = null;
var promptAnswers = {};

module.exports = yeoman.generators.Base.extend({

    initializing: function() {
        this.pkg = require('../../package.json');
        util = utils(this);
        var g = this;

        this.isSqlIntType = function(type){
            return [
                'TINYINT', 
                'SMALLINT',
                'MEDIUMINT',
                'INT',
                'BIGINT',
            ].indexOf(type.toUpperCase()) > -1;
        };

        this.isSqlFloatType = function(type){
            return [
                'REAL',
                'DOUBLE',
                'FLOAT',
            ].indexOf(type.toUpperCase()) > -1;
        };

        this.isSqlStrType = function(type){
            return [
                'VARCHAR',
                'CHAR',
                'TINYTEXT',
                'TEXT',
                'MEDIUMTEXT',
                'LONGTEXT',
            ].indexOf(type.replace(/\(\d+\)/, '').toUpperCase()) > -1;
        };

        this.isSqlDtType = function(type){
            return [
                'DATETIME',
                'DATE',
                'TIME',
            ].indexOf(type.toUpperCase()) > -1;
        };

        this.phpStrToDt = function(strType, sqlDateType){
            return strType.toLowerCase()+'StrTo'+util.humanize(sqlDateType);
        };

        this.phpDtToStr = function(strType, sqlDateType){
            return sqlDateType.toLowerCase()+'To'+util.humanize(strType)+'Str';
        };

        this.promptField = function(fields, callback){
            var prompts = [
                {
                    name: 'generate',
                    type: 'confirm',
                    message: fields.length ?
                        'Generate one more field?':
                        'Generate fields? (id field will be generated by default)'
                },
                {
                    name: 'phpField',
                    message: 'Php field name (camelize, no $):',
                    validate: function(value){
                        return !!value;
                    },
                    filter: function(value){
                        return util.camelize(value.replace(/^\$/, ''));
                    },
                    when: function(answers){
                        return answers.generate;
                    }
                },
                {
                    name: 'description',
                    message: 'Short field description:',
                    default: function(answers){
                        return util.humanize(answers.phpField);
                    },
                    // filter: function(value){
                    //     return util.humanize(value);
                    // },
                    when: function(answers){
                        return answers.generate;
                    }
                },
                {
                    name: 'sqlField',
                    message: 'SQL column name (underscored):',
                    default: function(answers){
                        return util.underscored(answers.phpField);
                    },
                    filter: function(value){
                        return util.underscored(value);
                    },
                    when: function(answers){
                        return answers.generate;
                    }
                },
                {
                    name: 'sqlType',
                    message: 'SQL column type:',
                    type: 'list',
                    choices: [
                        'INT',
                        'FLOAT',
                        'DATETIME',
                        'VARCHAR',
                        'TEXT',
                        '-more-'
                    ],
                    when: function(answers){
                        return answers.generate;
                    }
                },
                {
                    name: 'sqlType',
                    message: 'SQL column type:',
                    type: 'list',
                    choices: [
                        'TINYINT', 
                        'SMALLINT',
                        'MEDIUMINT',
                        'INT',
                        'BIGINT',
                        'REAL',
                        'DOUBLE',
                        'FLOAT',
                        'DATETIME',
                        'DATE',
                        'TIME',
                        'VARCHAR',
                        'CHAR',
                        'TINYTEXT',
                        'TEXT',
                        'MEDIUMTEXT',
                        'LONGTEXT',
                    ],
                    when: function(answers){
                        return answers.sqlType === '-more-' && answers.generate;
                    }
                },
                {
                    name: 'sqlType',
                    message: 'VARCHAR length:',
                    validate: function(value){
                        return parseInt(value) ? true : 'Provide a valid integer > 0';
                    },
                    filter: function(value){
                        return 'VARCHAR('+ parseInt(value) +')';
                    },
                    when: function(answers){
                        return answers.sqlType === 'VARCHAR' && answers.generate;
                    }
                },
                {
                    name: 'sqlType',
                    message: 'CHAR length:',
                    validate: function(value){
                        return parseInt(value) ? true : 'Provide a valid integer > 0';
                    },
                    filter: function(value){
                        return 'CHAR('+ parseInt(value) +')';
                    },
                    when: function(answers){
                        return answers.sqlType === 'CHAR' && answers.generate;
                    }
                },
                {
                    name: 'sqlNull',
                    message: 'Can this SQL column be NULL:',
                    type: 'list',
                    choices: [
                        {name: 'cannot be NULL', value: 'NOT NULL'},
                        {name: 'can be NULL', value: 'NULL'},
                    ],
                    default: 'NOT NULL',
                    when: function(answers){
                        return answers.generate;
                    }
                },
                {
                    name: 'default',
                    message: 'Default value (integer):',
                    filter: function(value){
                        return value ? '' + parseInt(value) : '';
                    },
                    when: function(answers){
                        return answers.generate && g.isSqlIntType(answers.sqlType);
                    }
                },
                {
                    name: 'default',
                    message: 'Default value (float):',
                    filter: function(value){
                        return value ? '' + parseFloat(value) : '';
                    },
                    when: function(answers){
                        return answers.generate && g.isSqlFloatType(answers.sqlType);
                    }
                },
                {
                    name: 'default',
                    message: 'Default value (string):',
                    when: function(answers){
                        return answers.generate && g.isSqlStrType(answers.sqlType);
                    }
                },
                {
                    name: 'default',
                    message: 'Default value (datetime):',
                    type: 'list',
                    choices: [
                        {name: '-none-', value: ''},
                        {name: 'NOW()', value: 'NOW()'},
                    ],
                    default: '',
                    when: function(answers){
                        return answers.generate && g.isSqlDtType(answers.sqlType);
                    }
                },
                {
                    name: 'sqlIndex',
                    message: 'Create SQL index on this column?:',
                    type: 'list',
                    choices: [
                        {name: '-none-', value: ''},
                        {name: 'INDEX', value: 'INDEX'},
                        {name: 'UNIQUE', value: 'UNIQUE'},
                    ],
                    default: '',
                    when: function(answers){
                        return answers.generate;
                    }
                },
            ];

            this.prompt(prompts, function(answers){
                if(answers.generate){
                    var isNull = answers.sqlNull === 'NULL';
                    if(g.isSqlStrType(answers.sqlType)){
                        answers.sqlDefault = answers.default ? 'DEFAULT \'' + answers.default + '\'': '';
                        answers.phpDefault = answers.default ? '\'' + answers.default + '\'' : (isNull ? 'null' : '\'\'');
                        answers.phpType = 'string';
                    }else if(g.isSqlIntType(answers.sqlType)){
                        answers.sqlDefault = answers.default ? 'DEFAULT ' + answers.default : '';
                        answers.phpDefault = answers.default ? answers.default : (isNull ? 'null' : '');
                        answers.phpType = 'integer';
                    }else if(g.isSqlFloatType(answers.sqlType)){
                        answers.sqlDefault = answers.default ? 'DEFAULT ' + answers.default : '';
                        answers.phpDefault = answers.default ? answers.default : (isNull ? 'null' : '');
                        answers.phpType = 'float';
                    }else if(g.isSqlDtType(answers.sqlType)){
                        answers.sqlDefault = answers.default ? 'DEFAULT ' + answers.default : '';
                        answers.phpDefault = answers.default ? 'new DateTime()' : 'null';
                        answers.phpType = 'DateTime';
                    }
                    callback(answers);
                }else{
                    callback(null);
                }
            });
        };

        this.promptFields = function(callback){
            var fields = [];
            var fieldsReady = function(field){
                if(field){
                    fields.push(field);
                    g.log(chalk.bold.cyan('Field set:'));
                    fields.forEach(function(field){
                        g.log('  '+field.phpField);
                    });
                    g.promptField(fields, fieldsReady);
                }else{
                    callback(fields);
                }
            };

            g.promptField(fields, fieldsReady);
        };
    },

    prompting: function() {
        var done = this.async();
        var g = this;
        // this.log(_);
        // Have Yeoman greet the user.
        var prompts = [
            /* model */
        {
            name: 'model',
            message: 'Model name:',
            type: 'input',
            filter: function(value){
                return util.classify(value).replace(/Model$/, '');
            },
            default: function(){
                return 'DummyModel';
            },
            // when: function(answers) {
            //     return answers.wizard === 'model';
            // }
        }, {
            name: 'dbTable',
            message: 'DB table name:',
            type: 'input',
            default: function(answers){
                var table = util.underscored(answers.model.replace(/Model$/, '').replace(/y$/, 'ie') + 's');
                return table;
            },
            // when: function(answers) {
            //     return answers.wizard === 'model';
            // }
        }, {
            name: 'dbIdColumn',
            message: 'DB table id column:',
            type: 'input',
            default: function(answers){
                var table = util.underscored(answers.model.replace(/Model$/, '')) + '_id';
                return table;
            },
            // when: function(answers) {
            //     return answers.wizard === 'model';
            // }
        }];

        var promptDone = function(answers) {
            this.promptFields(function(fields){
                answers.fields = fields;
                util.extend(promptAnswers, g.config.getAll(), answers);
                done();
            });
        }.bind(this);

        if(this.options.externalCall){
            promptDone(this.options.externalCall);
        }else{
            this.log(yosay('Welcome to the divine ' + chalk.red('Chayka') + ' generator!'));
            this.prompt(prompts, promptDone);
        }
    },

    writing: {
        directories: function() {
            util.mkdir('app');
            util.mkdir('app/controllers');
            util.mkdir('app/models');
        },


        model: function() {
            // var vars = this.Chayka.options;
            var vars = promptAnswers;
            var g = this;
            this.log(vars);

            var phpVars = '',
                phpVarTpl = util.readTpl('models/Model.var.xphp'),
                phpVarsDef = '',
                phpVarDefTpl = util.readTpl('models/Model.var.def.xphp'),
                phpGettersSetters = '',
                phpGettersSettersTpl = util.readTpl('models/Model.getter.setter.xphp'),
                phpPackDb = '',
                phpPackJson = '',
                phpPackTpl = util.readTpl('models/Model.pack.xphp'),
                phpPackDtTpl = util.readTpl('models/Model.pack.dt.xphp'),
                phpUnpackDb = '',
                phpUnpackJson = '',
                phpUnpackTpl = util.readTpl('models/Model.unpack.xphp'),
                phpUnpackDtTpl = util.readTpl('models/Model.unpack.dt.xphp'),
                phpSelectBy = '',
                phpSelectByTpl = util.readTpl('models/Model.selectBy.xphp'),
                sqlColumns = '',
                sqlColumnTpl = util.readTpl('sql/model.column.xsql');

            vars.fields.forEach(function(field){
                var filedVars = util.extend({}, field, vars);

                phpVars += util.template(phpVarTpl, filedVars);

                if(field.phpDefault){
                    phpVarsDef += util.template(phpVarDefTpl, filedVars);
                }

                phpGettersSetters += util.template(phpGettersSettersTpl, filedVars);

                phpPackDb += g.isSqlDtType(field.sqlType)?
                    util.template(phpPackDtTpl, util.extend(filedVars, {phpDtToStr: g.phpDtToStr('db', field.sqlType)})):
                    util.template(phpPackTpl, filedVars);

                phpPackJson += g.isSqlDtType(field.sqlType)?
                    util.template(phpPackDtTpl, util.extend(filedVars, {phpDtToStr: g.phpDtToStr('json', field.sqlType)})):
                    util.template(phpPackTpl, filedVars);

                phpUnpackDb += g.isSqlDtType(field.sqlType)?
                    util.template(phpUnpackDtTpl, util.extend(filedVars, {phpStrToDt: g.phpStrToDt('db', field.sqlType)})):
                    util.template(phpUnpackTpl, filedVars);

                phpUnpackJson += g.isSqlDtType(field.sqlType)?
                    util.template(phpUnpackDtTpl, util.extend(filedVars, {phpStrToDt: g.phpStrToDt('json', field.sqlType)})):
                    util.template(phpUnpackTpl, filedVars);

                if(field.sqlIndex){
                    phpSelectBy += util.template(phpSelectByTpl, filedVars);
                }

                sqlColumns += util.template(sqlColumnTpl, filedVars).replace(/\s+,/, ',');
            });

            var modelCode = util.readTpl('models/Model.xphp', vars);

            modelCode = util.insertAtSlashStarComment('modelVars', modelCode, phpVars);
            modelCode = util.insertAtSlashStarComment('__construct', modelCode, phpVarsDef);
            modelCode = util.insertAtSlashStarComment('modelGettersSetters', modelCode, phpGettersSetters);
            modelCode = util.insertAtSlashStarComment('packDbRecord', modelCode, phpPackDb);
            modelCode = util.insertAtSlashStarComment('unpackDbRecord', modelCode, phpUnpackDb);
            modelCode = util.insertAtSlashStarComment('packJsonItem', modelCode, phpPackJson);
            modelCode = util.insertAtSlashStarComment('unpackJsonItem', modelCode, phpUnpackJson);
            modelCode = util.insertAtSlashStarComment('selectBy', modelCode, phpSelectBy);

            util.write('app/models/'+vars.model + 'Model.php', modelCode);

            util.mkdir('app/sql');

            var sqlCode = util.readTpl('sql/model.xsql', vars);

            sqlCode = util.insertAtHashComment(vars.dbTable + '_columns', sqlCode, sqlColumns);

            util.write('app/sql/'+vars.dbTable + '.sql', sqlCode);

            var models = this.config.get('models');
            if(!models){
                models = [];                    
            }
            if(models.indexOf(vars.model) === -1){
                models.push(vars.model);   
            }
            this.config.set('models', models);
        },

    },

    install: function() {

    }
});